{"version":3,"sources":["actions.js","reducers.js","TodoTitle.js","TodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["fetchTodos","dispatch","Axios","get","then","response","results","Array","isArray","data","type","todos","toggleTodos","selected","completed","url","concat","put","deleteTodos","console","log","delete","initialState","selectedItems","todosReducer","state","arguments","length","undefined","action","Object","objectSpread","TodoTitle","react_default","a","createElement","TodoForm","item","handleInput","e","_this","setState","defineProperty","target","name","value","handleSubmit","preventDefault","_this$props","props","addTodo","ids","map","_ref","id","Math","max","apply","toConsumableArray","onSubmit","this","className","placeholder","required","onChange","React","Component","connect","todo","post","TodoList","options","checked","push","index","indexOf","splice","_this2","showCompleted","dispatchFetchTodos","toggleAllTodos","clearList","key","_id","onClick","isCompleted","filteredResults","filter","result","toggle","i","App","src_TodoTitle","src_TodoForm","src_TodoList","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","compose","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f3ba92c3.chunk.js","sourcesContent":["import Axios from 'axios';\n\nexport const UPDATE_SELECTED = 'UPDATE_SELECTED';\nexport const FETCH_TODOS = 'FETCH_TODOS';\nexport const ADD_TODO = 'ADD_TODO';\n\nexport const TOGGLE_MULTIPLE_TODOS = 'TOGGLE_MULTIPLE_TODOS';\nexport const TOGGLE_ALL_TODOS = 'TOGGLE_ALL_TODOS';\n\nexport const DELETE_TODOS = 'DELETE_TODOS';\nexport const CLEAR_LIST = 'CLEAR_LIST';\n\nexport const SHOW_COMPLETED = 'SHOW_COMPLETED';\n\n\n\nexport const updateSelected = (selectedItems) => {\n    return {\n        type: UPDATE_SELECTED,\n        selectedItems\n    };\n};\n\nexport const fetchTodosForState = (todos) => {\n  return {\n      type: FETCH_TODOS,\n      todos\n  };\n};\n\nexport const addTodoToState = (todos) => {\n    return {\n        type: ADD_TODO,\n        todos\n    };\n};\n\nexport const showCompletedFromState = (todos) => {\n    return {\n        type: SHOW_COMPLETED,\n        todos\n    };\n};\n\nexport const toggleTodosForState = (todos) => {\n    return {\n        type: TOGGLE_MULTIPLE_TODOS,\n        todos\n    };\n};\n\nexport const toggleAllTodosForState = (todos) => {\n  return {\n      type: TOGGLE_ALL_TODOS,\n      todos\n  }\n};\n\nexport const deleteTodosFromState = (todos) => {\n    return {\n        type: DELETE_TODOS,\n        todos\n    }\n};\n\nexport const clearListFromState = (todos) => {\n    return {\n        type: CLEAR_LIST,\n        todos\n    }\n};\n\nexport const fetchTodos = () => {\n    const url = 'http://localhost:3000/todos';\n    return dispatch => {\n        return Axios.get(url)\n            .then(response => {\n                const results = (!Array.isArray(response.data)) ? [response.data] : response.data;\n                dispatch(fetchTodosForState(results));\n            });\n    };\n\n};\n\nexport const showCompleted = (isCompleted) => {\n    const url = 'http://localhost:3000/todos';\n    return dispatch => {\n        return Axios.get(url)\n            .then(response => {\n                const results = (!Array.isArray(response.data)) ? [response.data] : response.data;\n                const filteredResults = results.filter(result => result.completed === isCompleted);\n                dispatch(showCompletedFromState(filteredResults));\n            });\n    };\n}\n\nexport const addTodo = (todo) => {\n    const url = 'http://localhost:3000/todo';\n    return dispatch => {\n        return Axios.post(url, todo)\n            .then(response => {\n                const results = (!Array.isArray(response.data)) ? [response.data] : response.data;\n                dispatch(addTodoToState(results));\n            });\n    }\n\n};\n\nexport const toggleTodos = (selected, completed) => {\n    return dispatch => {\n            const url = `http://localhost:3000/todo/${selected}/${completed}`;\n            return Axios.put(url)\n                .then (response => {\n                    const results = (!Array.isArray(response.data)) ? [response.data] : response.data;\n                    dispatch(toggleTodosForState(results));\n                });\n    }\n}\n\nexport const toggleAllTodos = (toggle) => {\n    const url = `http://localhost:3000/todos/all/${toggle}`;\n    return dispatch => {\n        return Axios.put(url)\n            .then (response => {\n                const results = (!Array.isArray(response.data)) ? [response.data] : response.data;\n                dispatch(toggleAllTodosForState(results));\n            });\n    };\n};\n\nexport const deleteTodos = (selected) => {\n    const url = `http://localhost:3000/todo/${selected}`;\n    console.log(url);\n    return dispatch => {\n        return Axios.delete(url)\n            .then(response => {\n                const results = (!Array.isArray(response.data)) ? [response.data] : response.data;\n                dispatch(deleteTodosFromState(results));\n            });\n    };\n};\n\nexport const clearList = () => {\n    const url = `http://localhost:3000/todos/all`;\n    return dispatch => {\n        return Axios.delete(url)\n            .then(response => {\n                const results = (!Array.isArray(response.data)) ? [response.data] : response.data;\n                dispatch(clearListFromState(results));\n            });\n    };\n};\n","import {\n    UPDATE_SELECTED,\n    ADD_TODO,\n    FETCH_TODOS,\n    TOGGLE_MULTIPLE_TODOS,\n    TOGGLE_ALL_TODOS,\n    CLEAR_LIST,\n    DELETE_TODOS,\n    SHOW_COMPLETED\n}  from './actions';\n\nconst initialState = {\n    todos: [],\n    selectedItems: []\n};\n\nconst todosReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case UPDATE_SELECTED:\n            return {\n                ...state,\n                selectedItems: action.selectedItems\n            }\n        case FETCH_TODOS:\n            return {\n                ...state,\n                todos: action.todos\n            }\n        case ADD_TODO:\n            return {\n                ...state,\n                todos: action.todos\n            };\n        case SHOW_COMPLETED:\n            return {\n                ...state,\n                todos: action.todos\n            };\n        case TOGGLE_ALL_TODOS:\n            return {\n                ...state,\n                todos: action.todos\n            };\n        case TOGGLE_MULTIPLE_TODOS:\n            return {\n                ...state,\n                todos: action.todos\n            };\n        case DELETE_TODOS:\n            return {\n                ...state,\n                todos: action.todos\n            }\n        case CLEAR_LIST:\n            return {\n                ...state,\n                todos: action.todos\n            }\n        default: return {...state};\n\n    }\n};\n\nexport default todosReducer;","import React from 'react';\n\nconst TodoTitle = () => {\n    return <h1>Welcome to the Todo Application</h1>\n}\n\nexport default TodoTitle;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo } from './actions';\n\nclass TodoForm extends React.Component {\n    state = {\n        item: ''\n    }\n\n    handleInput = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n\n    handleSubmit = (e) => {\n      e.preventDefault();\n      const { todos, addTodo } = this.props;\n      const { item } = this.state;\n      const ids = (typeof todos !== 'undefined') ? todos.map(({id}) => id) : [0];\n      const nextId = (todos.length === 0) ? 1 : Math.max(...ids) + 1;\n      const todo = {\n          id: nextId,\n          item,\n          completed: false\n      };\n      addTodo(todo);\n    };\n\n    render () {\n        return (\n        <form action=\"\" onSubmit={this.handleSubmit}>\n            <input type=\"text\" name=\"item\" id=\"item\" className=\"item\" placeholder=\"Enter Todo Item\" required onChange={this.handleInput}/>\n            <button type=\"submit\">Add Todo</button>\n        </form>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    todos: state.todos.todos\n});\n\nconst mapDispatchToProps = dispatch => ({\n    addTodo: (todo) => {\n        dispatch(addTodo(todo));\n    }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoForm);","import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n    showCompleted,\n    fetchTodos,\n    toggleAllTodos,\n    clearList,\n    toggleTodos,\n    deleteTodos\n} from './actions';\n\nclass TodoList extends React.Component {\n\n    state = {\n        options: []\n    };\n\n    onChange = (e) => {\n        const { options } = this.state;\n        if (e.target.checked) {\n            options.push(e.target.name);\n        } else {\n            const index = options.indexOf(e.target.name);\n            options.splice(index, 1);\n        }\n        this.setState({ options });\n        console.log(options);\n    };\n\n    render() {\n        const {\n            todos,\n            showCompleted,\n            dispatchFetchTodos,\n            toggleTodos,\n            toggleAllTodos,\n            deleteTodos,\n            clearList\n        } = this.props;\n        const {\n            options\n        } = this.state;\n        return (\n            <div id=\"todoLower\">\n\n                <form id=\"todoList\">\n                    {\n                        (todos.length === 0)\n                            ? <p >Enter a task to complete</p>\n                            : todos.map(todo => (\n                            <div key={todo._id} className={(!todo.completed) ? 'checkbox completed' : 'checkbox'}>\n                                <label>\n                                    <input\n                                        type=\"checkbox\"\n                                        className=\"todo-item\"\n                                        id={todo._id}\n                                        name={todo._id}\n                                        value={todo._id}\n                                        onChange={this.onChange}\n                                    />\n                                    {todo.id} {todo.item}\n                                </label>\n                            </div>\n                        ))\n\n                    }\n                </form>\n                <button type=\"button\" id=\"toggleTodo\" onClick={() => toggleTodos(options, true)}>Mark as Done</button>\n                <button type=\"button\" id=\"toggleTodo\" onClick={() => toggleTodos(options, false)}>Mark as Not Done</button>\n                <button type=\"button\" id=\"toggleAllTodos\" onClick={() => toggleAllTodos(true)}>Mark all as Done</button>\n                <button type=\"button\" id=\"toggleAllTodos\" onClick={() => toggleAllTodos(false)}>Mark all as Not Done</button>\n                <br/>\n                <button type=\"button\" id=\"showCompleted\" onClick={() => showCompleted(true)}>Show Done</button>\n                <button type=\"button\" id=\"showActive\" onClick={() => showCompleted(false)}>Show Not Done</button>\n                <button type=\"button\" id=\"showCompleted\" onClick={() => dispatchFetchTodos()}>Show All</button>\n                <br/>\n                <button type=\"button\" id=\"removeTodo\" onClick={() => deleteTodos(options)}>Remove Item</button>\n                <button type=\"button\" id=\"clearList\" onClick={() => clearList()}>Remove All Items</button>\n\n\n            </div>\n\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    todos: state.todos.todos,\n    selectedItems: state.todos.selectedItems\n});\n\nconst mapDispatchToProps = dispatch => ({\n    showCompleted: isCompleted => dispatch(showCompleted(isCompleted)),\n    dispatchFetchTodos: () => dispatch(fetchTodos()),\n    toggleAllTodos: toggle => dispatch(toggleAllTodos(toggle)),\n    toggleTodos: (selected, completed) => {\n        for (let i=0; i < selected.length; i++) {\n            dispatch(toggleTodos(selected[i], completed));\n        }\n    },\n    deleteTodos: (selected) => {\n        for (let i=0; i < selected.length; i++) {\n            dispatch(deleteTodos(selected[i]));\n        }\n    },\n    clearList: () => dispatch(clearList())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);","import React from 'react';\nimport { connect } from 'react-redux';\nimport TodoTitle from './TodoTitle';\nimport TodoForm from './TodoForm';\nimport TodoList from './TodoList';\nimport {\n    fetchTodos\n} from './actions';\nimport './App.css';\n\nclass App extends React.Component {\n\n    componentWillMount() {\n        const { dispatchFetchTodos } = this.props;\n        dispatchFetchTodos();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header>\n                    <TodoTitle />\n                </header>\n                <main>\n                    <TodoForm />\n                    <TodoList />\n                </main>\n                <footer></footer>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    dispatchFetchTodos: () => dispatch(fetchTodos())\n});\n\nexport default connect(null, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport {\n    createStore,\n    compose,\n    applyMiddleware,\n    combineReducers\n} from 'redux';\nimport todosReducer from './reducers';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootReducer = combineReducers({\n    todos: todosReducer\n});\n\nconst store = createStore(\n    rootReducer,\n    compose(\n        applyMiddleware(thunk)\n    )\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}